package library;

import dao.DaoImpl;
import java.awt.Color;
import java.awt.Component;
import static java.awt.Component.CENTER_ALIGNMENT;
import java.awt.Font;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import model.Item;
import model.Menu;
import model.OnlyOrder;
import model.Table;
import model.TableOrder;

public class AddOrderToTableFrame extends javax.swing.JFrame {

    private DaoImpl dao;

    public AddOrderToTableFrame() {
        initComponents();

    }

    AddOrderToTableFrame(DaoImpl dao) {
        try {
            initComponents();
            this.dao = dao;

            List<Table> tableList = dao.getTableList();
            ViewTableListInComboBox(tableList);

            List<OnlyOrder> orderList = dao.getOnlyOrderList();
            ViewOrderListInTable(orderList);

            List<Menu> menuList = dao.getMenuList();
            ViewMenuListInComboBox(menuList);

            Font f = new Font("Calibri", Font.ITALIC, 18);
            JTableHeader header = orderTable.getTableHeader();
            header.setFont(f);
            header.setForeground(Color.white);

            ((DefaultTableCellRenderer) header.getDefaultRenderer())
                    .setHorizontalAlignment(JLabel.CENTER);

            orderTable.getTableHeader().setOpaque(false);
            orderTable.getTableHeader().setBackground(Color.decode("#3E68FF"));

            tableLbl.setVisible(false);
            tableCombo.setVisible(false);

        } catch (Exception ex) {
            Logger.getLogger(AddOrderToTableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tableLbl = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        tableCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        numSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        menuCombo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        priceTxt = new javax.swing.JTextField();
        clearBtn = new javax.swing.JLabel();
        saveBtn = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        addTable = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        addOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bg.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("AD");

        tableLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tableLbl.setText("MASA");

        nameTxt.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        nameTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));

        tableCombo.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        tableCombo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("SAY");

        numSpinner.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        numSpinner.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));
        numSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numSpinnerStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("SİFARİŞ");

        menuCombo.setBackground(new java.awt.Color(0, 255, 0));
        menuCombo.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        menuCombo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("HESAB");

        priceTxt.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        priceTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));

        clearBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\Windows10\\Downloads\\button (3).png")); // NOI18N
        clearBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearBtnMouseClicked(evt);
            }
        });

        saveBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\Windows10\\Downloads\\button (4).png")); // NOI18N
        saveBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBtnMouseClicked(evt);
            }
        });

        orderTable.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        orderTable.setRowHeight(33);
        orderTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        orderTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(orderTable);

        addTable.setBackground(new java.awt.Color(204, 0, 204));
        addTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addTableMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("SİFARİŞİ MASAYA ƏLAVƏ ET");

        javax.swing.GroupLayout addTableLayout = new javax.swing.GroupLayout(addTable);
        addTable.setLayout(addTableLayout);
        addTableLayout.setHorizontalGroup(
            addTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addTableLayout.setVerticalGroup(
            addTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
        );

        addOrder.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        addOrder.setIcon(new javax.swing.ImageIcon("C:\\Users\\Windows10\\Desktop\\JAVA\\DESKTOP\\DESKTOP_IMG\\Add_35pxhgk.png")); // NOI18N
        addOrder.setText("Əlavə Et");
        addOrder.setToolTipText("");
        addOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bgLayout.createSequentialGroup()
                            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(saveBtn)
                                .addComponent(tableLbl))
                            .addGap(18, 18, 18)
                            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(clearBtn)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addOrder)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(20, 20, 20)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(bgLayout.createSequentialGroup()
                                        .addGap(123, 123, 123)
                                        .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bgLayout.createSequentialGroup()
                            .addGap(74, 74, 74)
                            .addGap(123, 123, 123)
                            .addComponent(numSpinner))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bgLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                            .addComponent(menuCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(menuCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(addOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tableLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveBtn)
                    .addComponent(clearBtn))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void clearBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearBtnMouseClicked
        priceTxt.setText("");
        nameTxt.setText("");
        tableCombo.setSelectedItem("Masa Seç");
        menuCombo.setSelectedItem("Sifariş Seç");
        numSpinner.setValue(0);
    }//GEN-LAST:event_clearBtnMouseClicked

    private void saveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnMouseClicked
        try {
            Item tableItem = (Item) tableCombo.getSelectedItem();
            int rowIndex = orderTable.getSelectedRow();
            Long selectedRow = (Long) orderTable.getValueAt(rowIndex, 0);

            OnlyOrder onlyOrder = dao.getOnlyOrderById(selectedRow);

            TableOrder tableOrder = new TableOrder();
            tableOrder.setResName(onlyOrder.getResName());

            Table table = new Table();
            table.setId(tableItem.getId());

            onlyOrder.setId(selectedRow);

            tableOrder.setTable(table);
            tableOrder.setOrder(onlyOrder);

            boolean isAdded = dao.add(tableOrder);
            if (isAdded) {
                JOptionPane.showMessageDialog(null, "Sifariş Masaya Əlavə Olundu...");
                boolean deleteOnlyOrder = dao.deleteOnlyOrder(selectedRow);
                if (deleteOnlyOrder) {
                    List<OnlyOrder> onlyOrderList = dao.getOnlyOrderList();
                    ViewOrderListInTable(onlyOrderList);
                    boolean changeTableStatus = dao.changeTableStatus(table.getId(), (long) 2);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AddOrderToTableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveBtnMouseClicked

    private void addTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addTableMouseClicked
        try {
            int rowIndex = orderTable.getSelectedRow();
            Long selectedRow = (Long) orderTable.getValueAt(rowIndex, 0);
            tableLbl.setVisible(true);
            tableCombo.setVisible(true);
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Masaya əlavə etmək isdədiyiniz sifarişi seçin !!!");
        }


    }//GEN-LAST:event_addTableMouseClicked

    private void addOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderActionPerformed
        try {
            String resName = nameTxt.getText();
            int num = (int) numSpinner.getValue();
            Item menuItem = (Item) menuCombo.getSelectedItem();
            Menu menu = dao.getMenuById(menuItem.getId());
            Float price = num * menu.getPrice();
            String tOrder = num + " ədəd " + menu.getMenuName();

            OnlyOrder order = new OnlyOrder();
            order.setNum(num);
            order.settOrder(tOrder);
            order.setPrice(price);
            order.setResName(resName);
            order.setMenu(menu);

            boolean isAdded = dao.add(order);
            if (isAdded) {
                List<OnlyOrder> orderList = dao.getOnlyOrderList();
                ViewOrderListInTable(orderList);
                priceTxt.setText("");
                numSpinner.setValue(0);
            } else {
                System.out.println("Xeta");
            }
        } catch (Exception ex) {
            Logger.getLogger(AddOrderToTableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addOrderActionPerformed

    private void numSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numSpinnerStateChanged
        try {
            int num = (int) numSpinner.getValue();
            Item menuItem = (Item) menuCombo.getSelectedItem();
            Menu menu = dao.getMenuById(menuItem.getId());
            Float price = num * menu.getPrice();
            priceTxt.setText(price.toString());
        } catch (Exception ex) {
            Logger.getLogger(AddOrderToTableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_numSpinnerStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addOrder;
    private javax.swing.JPanel addTable;
    private javax.swing.JPanel bg;
    private javax.swing.JLabel clearBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox menuCombo;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JSpinner numSpinner;
    private javax.swing.JTable orderTable;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JLabel saveBtn;
    private javax.swing.JComboBox tableCombo;
    private javax.swing.JLabel tableLbl;
    // End of variables declaration//GEN-END:variables

    private void ViewTableListInComboBox(List<Table> tableList) {
        DefaultComboBoxModel model = (DefaultComboBoxModel) tableCombo.getModel();
        for (Table table : tableList) {
            model.addElement(new Item(table.getId(), table.getName()));
        }
    }

    private void ViewMenuListInComboBox(List<Menu> menuList) {
        DefaultComboBoxModel model = (DefaultComboBoxModel) menuCombo.getModel();
        for (Menu menu : menuList) {
            model.addElement(new Item(menu.getId(), menu.getMenuName() + " " + menu.getPrice() + " AZN"));
        }
    }

    private void ViewOrderListInTable(List<OnlyOrder> orderList) {

        class LabelRenderer implements TableCellRenderer {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

                return (Component) value;

            }

        }

        DefaultTableModel table = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        };

        table.addColumn("Id");
        table.addColumn("№");
        table.addColumn("Ad");
        table.addColumn("Sifariş");
        table.addColumn("Hesab");

        for (OnlyOrder order : orderList) {
            Object data[] = new Object[]{
                order.getId(), order.getRowNum(), order.getResName(), order.gettOrder(), order.getPrice()

            };
            table.addRow(data);
        }

        orderTable.setModel(table);

        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) orderTable.getDefaultRenderer(Object.class);
        renderer.setHorizontalAlignment(SwingConstants.CENTER);

        orderTable.getColumnModel().getColumn(0).setMinWidth(0);
        orderTable.getColumnModel().getColumn(0).setMaxWidth(0);
        orderTable.getColumnModel().getColumn(0).setWidth(0);

        orderTable.getColumnModel().getColumn(1).setPreferredWidth(10);
    }

}
