package library;

import dao.DaoImpl;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.Book;
import model.Item;
import model.OrderBook;
import model.Student;

public class EditOrderBook extends javax.swing.JFrame {

    private DaoImpl dao;
    private Long selectedRow;
    private String globCheckName;

    public EditOrderBook() {
        initComponents();
    }

    EditOrderBook(DaoImpl dao, Long selectedRow, String globCheckName) {
        initComponents();
        this.dao = dao;
        this.selectedRow = selectedRow;
        this.globCheckName = globCheckName;

        if ("sold".equals(globCheckName)) {
            try {
                jLabel2.setVisible(false);
                borrowTime.setVisible(false);
                OrderBook orderBook = dao.getOrderBookById(selectedRow, (long) 1);
                ViewStudentListInComboBox(orderBook);
                ViewBookListInComboBox(orderBook);
                priceTxt.setText(orderBook.getBook().getPrice().toString());
            } catch (Exception ex) {
                Logger.getLogger(EditOrderBook.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if ("borrow".equals(globCheckName)) {
            try {
                OrderBook orderBook = dao.getOrderBookById(selectedRow, (long) 2);
                ViewStudentListInComboBox(orderBook);
                ViewBookListInComboBox(orderBook);
                priceTxt.setText(orderBook.getBook().getPrice().toString());
                borrowTime.setDate(orderBook.getBorrowTime());
            } catch (Exception ex) {
                Logger.getLogger(EditOrderBook.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if ("readNow".equals(globCheckName)) {
            try {
                jLabel2.setVisible(false);
                borrowTime.setVisible(false);
                jLabel5.setVisible(false);
                priceTxt.setVisible(false);

                OrderBook orderBook = dao.getOrderBookById(selectedRow, (long) 4);
                ViewStudentListInComboBox(orderBook);
                ViewBookListInComboBox(orderBook);
            } catch (Exception ex) {
                Logger.getLogger(EditOrderBook.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        priceTxt = new javax.swing.JTextField();
        studentCombo = new javax.swing.JComboBox<>();
        bookCombo = new javax.swing.JComboBox<>();
        editBtn = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        borrowTime = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bg.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel1.setText("TƏLƏBƏ");

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel4.setText("KİTAB");

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel5.setText("QİYMƏTİ");

        priceTxt.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        studentCombo.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        bookCombo.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        bookCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookComboActionPerformed(evt);
            }
        });

        editBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\Windows10\\Downloads\\button (6).png")); // NOI18N
        editBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBtnMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel2.setText("KİRAYƏ VAXTI");

        borrowTime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                .addContainerGap(162, Short.MAX_VALUE)
                .addComponent(editBtn)
                .addGap(156, 156, 156))
            .addGroup(bgLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(84, 84, 84)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(priceTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(studentCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(borrowTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(studentCombo)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(48, 48, 48)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookCombo))
                .addGap(47, 47, 47)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(borrowTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(editBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bookComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookComboActionPerformed
        try {
            Item bookItem = (Item) bookCombo.getSelectedItem();
            Book book = dao.getBookById(bookItem.getId());
            priceTxt.setText(book.getPrice().toString());
        } catch (Exception ex) {
            Logger.getLogger(EditOrderBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bookComboActionPerformed

    private void editBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtnMouseClicked
        try {
            if ("sold".equals(globCheckName)) {
                Item studentItem = (Item) studentCombo.getSelectedItem();
                Item bookItem = (Item) bookCombo.getSelectedItem();
                Float price = Float.valueOf(priceTxt.getText());

                Student student = new Student();
                Book book = new Book();

                student.setId(studentItem.getId());
                book.setId(bookItem.getId());
                OrderBook orderBook = new OrderBook();
                orderBook.setPrice(price);
                orderBook.setStudent(student);
                orderBook.setBook(book);

                boolean updateSoldBook = dao.updateSoldBook(orderBook, selectedRow);
                if (updateSoldBook) {
                    JOptionPane.showMessageDialog(null, "Dəyişiklik edildi...");
                    this.dispose();
                }
            }
            if ("borrow".equals(globCheckName)) {
                Item studentItem = (Item) studentCombo.getSelectedItem();
                Item bookItem = (Item) bookCombo.getSelectedItem();
                Float price = Float.valueOf(priceTxt.getText());
                Date time = borrowTime.getDate();

                Student student = new Student();
                Book book = new Book();

                student.setId(studentItem.getId());
                book.setId(bookItem.getId());
                OrderBook orderBook = new OrderBook();
                orderBook.setPrice(price);
                orderBook.setBorrowTime(time);
                orderBook.setStudent(student);
                orderBook.setBook(book);

                boolean updateBorrowBook = dao.updateBorrowBook(orderBook, selectedRow);
                if (updateBorrowBook) {
                    JOptionPane.showMessageDialog(null, "Düzəliş edildi...");
                    this.dispose();
                }
            }
            if ("readNow".equals(globCheckName)) {
                Item studentItem = (Item) studentCombo.getSelectedItem();
                Item bookItem = (Item) bookCombo.getSelectedItem();

                Student student = new Student();
                Book book = new Book();

                student.setId(studentItem.getId());
                book.setId(bookItem.getId());
                OrderBook orderBook = new OrderBook();
                orderBook.setStudent(student);
                orderBook.setBook(book);

                boolean updateReadNowBook = dao.updateReadNowBook(orderBook, selectedRow);
                if (updateReadNowBook) {
                    JOptionPane.showMessageDialog(null, "Düzəliş edildi...");
                    this.dispose();
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(EditOrderBook.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_editBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditOrderBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditOrderBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditOrderBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditOrderBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditOrderBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JComboBox<String> bookCombo;
    private com.toedter.calendar.JDateChooser borrowTime;
    private javax.swing.JLabel editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JComboBox<String> studentCombo;
    // End of variables declaration//GEN-END:variables

    private void ViewStudentListInComboBox(OrderBook orderBook) throws Exception {
        DefaultComboBoxModel model = (DefaultComboBoxModel) studentCombo.getModel();
        List<Student> studentList = dao.getStudentList();
        for (Student student : studentList) {
            model.addElement(new Item(student.getId(), student.getName() + " " + student.getSurname()));
        }
        model.setSelectedItem(new Item(orderBook.getStudent().getId(), orderBook.getStudent().getName() + " " + orderBook.getStudent().getSurname()));

    }

    private void ViewBookListInComboBox(OrderBook orderBook) throws Exception {
        DefaultComboBoxModel model = (DefaultComboBoxModel) bookCombo.getModel();
        List<Book> bookList = dao.getBookList();
        for (Book book : bookList) {
            model.addElement(new Item(book.getId(), book.getTitle()));
        }
        model.setSelectedItem(new Item(orderBook.getBook().getId(), orderBook.getBook().getTitle()));
    }
}
